{"version":3,"sources":["components/Chat.js","components/Welcome.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","socket","name","room","history","setShowChat","useState","chatHistory","setChatHistory","message","setMessage","dummyDiv","useRef","messageInput","useEffect","a","current","scrollIntoView","behavior","focus","on","data","sendMessage","timestamp","Date","now","getHours","getMinutes","emit","alert","className","map","index","ref","type","value","placeholder","onChange","e","target","onKeyPress","key","onClick","disconnect","window","location","reload","FrontPage","setName","setRoom","nameInput","console","log","joinRoom","io","connect","App","showChat","Welcome","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.982d4483.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\n\r\nconst Chat = ({ socket, name, room, history, setShowChat }) => {\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const dummyDiv = useRef();\r\n  const messageInput = useRef();\r\n\r\n  useEffect(async () => {\r\n    await setChatHistory(history);\r\n    dummyDiv.current.scrollIntoView({ behavior: \"smooth\" });\r\n    messageInput.current.focus();\r\n  }, [history]);\r\n\r\n  useEffect(() => {\r\n    dummyDiv.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [history]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"recieve-message\", (data) => {\r\n      setChatHistory((chatHistory) => [...chatHistory, data]);\r\n      dummyDiv.current.scrollIntoView({ behavior: \"smooth\" });\r\n    });\r\n  }, [socket]);\r\n\r\n  const closeSocket = () => {\r\n    socket.disconnect(socket);\r\n    setShowChat(false);\r\n    window.location.reload();\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (message !== \"\") {\r\n      const data = {\r\n        name: name,\r\n        room: room,\r\n        message: message,\r\n        timestamp:\r\n          new Date(Date.now()).getHours() +\r\n          \":\" +\r\n          new Date(Date.now()).getMinutes(),\r\n      };\r\n\r\n      setChatHistory((chatHistory) => [...chatHistory, data]);\r\n\r\n      // console.time(\"sending msg\");\r\n      await socket.emit(\"send-message\", data);\r\n      // console.timeEnd(\"sending msg\");\r\n\r\n      setMessage(\"\");\r\n      dummyDiv.current.scrollIntoView({ behavior: \"smooth\" });\r\n    } else alert(\"enter message\");\r\n  };\r\n\r\n  const renderChatHistory = () => {\r\n    return chatHistory.map((data, index) => {\r\n      return (\r\n        <div className={name === data.name ? \"me\" : \"other\"} key={index}>\r\n          <h4 className=\"message\">{data.message}</h4>\r\n          <p className=\"details\">\r\n            {name === data.name ? \"me\" : data.name} | {data.timestamp}\r\n          </p>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"room-name\">\r\n        Hi {name}, welcome to {room}\r\n      </div>\r\n      <div className=\"chat-history\">\r\n        {renderChatHistory()}\r\n        <div ref={dummyDiv}></div>\r\n      </div>\r\n      <div className=\"chat-inputs\">\r\n        <input\r\n          type=\"text\"\r\n          value={message}\r\n          placeholder={`${name}, write a message`}\r\n          onChange={(e) => {\r\n            setMessage(e.target.value);\r\n          }}\r\n          onKeyPress={(e) => {\r\n            e.key === \"Enter\" && sendMessage();\r\n          }}\r\n          ref={messageInput}\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n        <button onClick={closeSocket}>Logout</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst FrontPage = ({\r\n  socket,\r\n  setShowChat,\r\n  setChatHistory,\r\n  setName,\r\n  setRoom,\r\n  room,\r\n  name,\r\n}) => {\r\n  const nameInput = useRef();\r\n  useEffect(() => {\r\n    nameInput.current.focus();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"get-history\", (data) => {\r\n      setChatHistory(data);\r\n      console.log(data);\r\n    });\r\n    console.log(\"in effect\");\r\n  }, [socket]);\r\n\r\n  const joinRoom = () => {\r\n    if (name !== \"\" && room !== \"\") {\r\n      const data = { name, room };\r\n      socket.emit(\"join-chat-room\", data);\r\n      setShowChat(true);\r\n    } else alert(\"something missing!\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter your name\"\r\n        ref={nameInput}\r\n        onChange={(e) => {\r\n          setName(e.target.value);\r\n        }}\r\n        onKeyPress={(e) => {\r\n          e.key === \"Enter\" && joinRoom();\r\n        }}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter room name to join\"\r\n        onChange={(e) => {\r\n          setRoom(e.target.value);\r\n        }}\r\n        onKeyPress={(e) => {\r\n          e.key === \"Enter\" && joinRoom();\r\n        }}\r\n      />\r\n      <button onClick={joinRoom}>Join Room</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Chat from \"./components/Chat\";\nimport Welcome from \"./components/Welcome\";\n\n// const socket = io.connect(\"http://localhost:5000\");\nconst socket = io.connect(\"https://simplestchatapp.herokuapp.com\");\n// const socket = io.connect(\"http://192.168.1.17:5000\");\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n\n  const [chatHistory, setChatHistory] = useState([]);\n\n  const [showChat, setShowChat] = useState(false);\n\n  return (\n    <div className=\"main\">\n      <h1>Simplest Chat App</h1>\n      <div>\n        {!showChat ? (\n          <Welcome\n            socket={socket}\n            setShowChat={setShowChat}\n            setChatHistory={setChatHistory}\n            setName={setName}\n            setRoom={setRoom}\n            name={name}\n            room={room}\n          />\n        ) : (\n          <Chat\n            setShowChat={setShowChat}\n            socket={socket}\n            name={name}\n            room={room}\n            history={chatHistory}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}